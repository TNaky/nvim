[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'osyo-manga/unite-quickfix'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
    \ "_" : {
      \ "hook/unite_quickfix/enable_failure" : 1,
      \ "hook/close_unite_quickfix/enable_hook_loaded" : 1,
      \ "hook/close_quickfix/enable_exit" : 1,
      \ "hook/close_buffer/enable_failure" : 1,
      \ "hook/close_buffer/enable_empty_data" : 1,
      \ "hook/inu/enable" : 1,
      \ "hook/inu/wait" : 20,
      \ "outputter" : "multi:buffer:quickfix",
      \ "outputter/buffer/split" : ":botright 5sp",
      \ "outputter/buffer/close_on_empty" : 1,
      \ "runner" : "vimproc",
      \ "runner/vimproc/updatetime" : 60,
    \ }
  \ }
  let g:quickrun_config.processing = {
    \ 'command': 'processing-java',
    \ 'exec': '%c --sketch=%s:p:h/ --output=/tmp/processing --run --force'
  \ }
  
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  nnoremap <F5> :QuickRun
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'cespare/vim-toml'

#[[plugins]]
#repo = 'neomake/neomake'
#on_path = '.*'
#hook_add = '''
#  autocmd! BufWritePost,BufEnter * Neomake
#'''

[[plugins]]
repo = 'w0rp/ale'
on_path = '*'
hook_add = '''
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '⨉'
  let g:ale_sign_warning = '⚠'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 'never'

  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0

  nmap [ale] <Nop>
  map <C-k> [ale]
  nmap <silent> [ale]<C-P> <Plug>(ale_previous)
  nmap <silent> [ale]<C-N> <Plug>(ale_next)
'''

[[plugins]]
repo = 'vim-scripts/taglist.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set updatetime=250
  set signcolumn=yes
  nmap ]h <Plug>GitGutterNextHunk
  nmap [h <Plug>GitGutterPrevHunk
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  nnoremap <silent> <F1> :help@ja<Cr>
  inoremap <silent> <F1> <ESC>:help@ja<Cr>
'''

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  nnoremap <silent> fb :<C-u>Unite buffer<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler'
hook_add = '''
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_tree_indentation = 2
  let g:vimfiler_enable_auto_cd = 1
  let g:vimfiler_ignore_pattern='\(^\.\|\~$\|\.pyc$\|\.[oad]$\)'
  autocmd FileType vimfiler nmap <buffer> <CR> <Plug>(vimfiler_expand_or_edit)
  nnoremap <silent> <F2> :VimFiler -split -winwidth=30 -simple -no-quit<Cr>
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

[[plugins]]
repo = 'sjl/gundo.vim'
hook_add = '''
  let g:gundo_width = 30
  let g:gundo_help = 0
  let g:gundo_preview_bottom = 1
  let g:gundo_preview_statusline = 1
  let g:gundo_tree_statusline = 1
  let g:gundo_return_on_revert = 0
  nmap U :<C-u>GundoToggle<CR>
'''

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'mrk21/yaml-vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \ 'colorscheme' : 'powerline',
    \ 'mode_map': {'c': 'NORMAL'},
    \ 'active': {
      \ 'left': [
        \ [ 'mode', 'paste' ],
        \ [ 'fugitive', 'filename' ]
      \ ],
      \ 'right' : [
        \ ['lineinfo', 'syntastic'],
        \ ['percent'],
        \ ['charcode', 'fileformat', 'fileencoding', 'filetype'],
      \ ]
    \ },
    \ 'component_function': {
      \ 'modified': 'MyModified',
      \ 'readonly': 'MyReadonly',
      \ 'fugitive': 'MyFugitive',
      \ 'filename': 'MyFilename',
      \ 'fileformat': 'MyFileformat',
      \ 'filetype': 'MyFiletype',
      \ 'fileencoding': 'MyFileencoding',
      \ 'mode': 'MyMode',
      \ 'syntastic': 'SyntasticStatuslineFlag',
      \ 'charcode': 'MyCharCode',
      \ 'gitgutter': 'MyGitGutter',
    \ },
    \ 'separator': {'left': '⮀', 'right': '⮂'},
    \ 'subseparator': {'left': '⮁', 'right': '⮃'}
  \ }
  
  function! MyModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction
  
  function! MyReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
  endfunction
  
  function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
      \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
      \  &ft == 'unite' ? unite#get_status_string() :
      \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
      \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
      \ ('' != MyModified() ? ' ' . MyModified() : '')
  endfunction
  
  function! MyFugitive()
    try
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        let _ = fugitive#head()
        return strlen(_) ? '⭠ '._ : ''
      endif
    catch
    endtry
    return ''
  endfunction
  
  function! MyFileformat()
    return winwidth('.') > 70 ? &fileformat : ''
  endfunction
  
  function! MyFiletype()
    return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction
  
  function! MyFileencoding()
    return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction
  
  function! MyMode()
    return winwidth('.') > 60 ? lightline#mode() : ''
  endfunction
  
  function! MyGitGutter()
    if ! exists('*GitGutterGetHunkSummary') || ! get(g:, 'gitgutter_enabled', 0) || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
      \ g:gitgutter_sign_added . ' ',
      \ g:gitgutter_sign_modified . ' ',
      \ g:gitgutter_sign_removed . ' '
    \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
  endfunction
  
  function! MyCharCode()
    if winwidth('.') <= 70
      return ''
    endif
    redir => ascii
    silent! ascii
    redir END
    if match(ascii, 'NUL') != -1
      return 'NUL'
    endif
    let nrformat = '0x%02x'
    let encoding = (&fenc == '' ? &enc : &fenc)
    if encoding == 'utf-8'
      let nrformat = '0x%04x'
    endif
    let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')
    let nr = printf(nrformat, nr)
    return "'". char ."' ". nr
  endfunction
'''

# [[plugins]]
# repo = "jacquesbh/vim-showmarks"
hook_add = '''
aug show-marks-sync
  au!
  au BufReadPost * sil! DoShowMarks
  nnoremap [Mark] <Nop>
  nmap m [Mark]
  nnoremap [Mark]n ]`
  nnoremap [Mark]p [`
  if !exists('g:markrement_char')
    let g:markrement_char = [
    \  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    \  'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
    \ ]
  endif
  nnoremap <silent>[Mark]m :<C-u>call <SID>Qmark()<CR>
  function! s:Qmark()
    let b:markrement_pos = exists('b:markrement_pos') ? (b:markrement_pos + 1) % len(g:markrement_char) : 0
    execute 'mark' g:markrement_char[b:markrement_pos]
    echo 'marked' g:markrement_char[b:markrement_pos]
  endfunction
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
  autocmd BufReadPost * delmarks!
aug END
'''
